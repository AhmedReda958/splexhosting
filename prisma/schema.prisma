generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String?
  email       String    @unique
  password    String
  phoneNumber String?
  role        String    @default("User")
  emailVerified  DateTime?
  status      String    @default("Active")
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  accounts    Account[]
  sessions    Session[]
  servers     Server[]
  invoices    Invoice[]
  orders      Order[]
}
model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Server {
  id         Int      @id @default(autoincrement())
  userId     Int
  serverName String
  ipAddress  String
  status     String   @default("Active")
  planId     Int?
  ram        Int?
  cpu        Int?
  storage    Int?
  os         String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id])
  plan Plan? @relation(fields: [planId], references: [id])
}

model Plan {
  id          Int      @id @default(autoincrement())
  planName    String
  description String?
  price       Float
  resources   Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  servers     Server[]
  Order       Order[]
}

model Order {
  id        Int       @id @default(autoincrement())
  userId    Int
  planId    Int
  orderDate DateTime  @default(now())
  status    String
  amount    Float
  user      User      @relation(fields: [userId], references: [id])
  plan      Plan?     @relation(fields: [planId], references: [id])
  invoices  Invoice[]
}

model Invoice {
  id          Int      @id @default(autoincrement())
  userId      Int
  orderId     Int
  amount      Float
  invoiceDate DateTime @default(now())
  dueDate     DateTime
  status      String
  user        User     @relation(fields: [userId], references: [id])
  order       Order    @relation(fields: [orderId], references: [id])
}
